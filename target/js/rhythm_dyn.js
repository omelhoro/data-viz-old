// Generated by CoffeeScript 1.8.0
(function() {
  var getArray, lineChart, r, rhythmMetric, stats, update_chart;

  rhythmMetric = function(r) {
    return [r.mean() * 1000, r.dev() * 1000, r.varco(), r.npvi() * 100, r.rpvi() * 1000];
  };

  stats = function(a1, a2) {
    var alen, r, sum;
    r = {};
    sum = function(a) {
      return a.reduce((function(l, e) {
        return l + e;
      }), 0);
    };
    alen = a1.length;
    r['mean'] = function() {
      if (r._mean == null) {
        r['_mean'] = a1.reduce((function(a, e) {
          return a + e;
        }), 0) / alen;
      }
      return r['_mean'];
    };
    r['dev'] = function() {
      var m, mid, pow, v;
      if (r._dev == null) {
        m = r.mean();
        pow = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = a1.length; _i < _len; _i++) {
            v = a1[_i];
            _results.push(Math.pow(v - m, 2));
          }
          return _results;
        })();
        mid = sum(pow) / (alen - 1);
        r['_dev'] = Math.sqrt(mid);
      }
      return r['_dev'];
    };
    r['varco'] = function() {
      return (r.dev() * 100) / r.mean();
    };
    r['npvi'] = function() {
      var calc, e, i;
      if (r._npvi == null) {
        calc = function(e1, e2) {
          return Math.abs(e1 - e2) / ((e1 + e2) / 2);
        };
        r['_npvi'] = sum((function() {
          var _i, _len, _ref, _results;
          _ref = a1.slice(0, -1);
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            e = _ref[i];
            _results.push(calc(e, a1[i + 1]));
          }
          return _results;
        })()) / (alen - 1);
      }
      return r['_npvi'];
    };
    r['rpvi'] = function() {
      var e, i;
      if (r._rpvi == null) {
        r['_rpvi'] = sum((function() {
          var _i, _len, _ref, _results;
          _ref = a1.slice(0, -1);
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            e = _ref[i];
            _results.push(Math.abs(e - a1[i + 1]));
          }
          return _results;
        })()) / (alen - 1);
      }
      return r['_rpvi'];
    };
    return r;
  };

  r = stats([1, 2, 3, 4, 5]);

  console.log([r.mean(), r.dev(), r.varco(), r.npvi(), r.rpvi()]);

  lineChart = function(a, r) {
    var data, e, h, i, pairs_a, range, x;
    if (r == null) {
      r = 5;
    }
    range = (function() {
      var _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = a.length; r > 0 ? _i <= _ref : _i >= _ref; x = _i += r) {
        _results.push(x);
      }
      return _results;
    })();
    pairs_a = d3.pairs(range);
    r = (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = pairs_a.length; _i < _len; i = ++_i) {
        e = pairs_a[i];
        _results.push([i].concat(rhythmMetric(stats(a.slice(e[0], e[1])))));
      }
      return _results;
    })();
    h = ['bin', 'mean', 'dev', 'varco', 'npvi', 'rpvi'];
    data = google.visualization.arrayToDataTable([h].concat(r));
    return data;
  };

  getArray = function(i, isVow, data) {
    var a, k;
    k = Object.keys(data)[i];
    if (isVow) {
      a = data[k].v;
    } else {
      a = data[k].c;
    }
    return [k, a];
  };

  update_chart = function(chart, data, opts) {
    var i, isVow;
    i = 1;
    isVow = true;
    return ($(".inter-chart")).click(function(e) {
      var a, d, id, k, t, _ref;
      t = e.target;
      id = $(t).prop("id");
      if (id === "next-part") {
        i++;
      } else {
        isVow = !isVow;
      }
      _ref = getArray(i, isVow, data), k = _ref[0], a = _ref[1];
      d = lineChart(a);
      opts.title = k;
      return chart.draw(d, opts);
    });
  };

  d3.json("./static/data/lima_rhythm_single_raw.json", function(data) {
    var a, chart, d, k, opts, _ref;
    _ref = getArray(0, true, data), k = _ref[0], a = _ref[1];
    d = lineChart(a);
    chart = new google.visualization.LineChart(document.getElementById('chart_div'));
    opts = {
      title: k,
      vAxis: {
        maxValue: 150
      },
      animation: {
        duration: 500
      }
    };
    google.setOnLoadCallback(chart.draw(d, opts));
    return update_chart(chart, data, opts);
  });

}).call(this);

//# sourceMappingURL=rhythm_dyn.js.map
