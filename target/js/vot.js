// Generated by CoffeeScript 1.7.1
(function() {
  var Session, session, under;

  under = _;

  Session = (function() {
    function Session(data) {
      var k, _;
      this.HE = 500;
      this.WI = 500;
      this.PAD = 70;
      this.update = false;
      this.chart = "";
      this.partAr = (function() {
        var _results;
        _results = [];
        for (k in data) {
          _ = data[k];
          _results.push(k);
        }
        return _results;
      })();
      this.txt = "";

      /*
      		@svg=d3.select("div#map").append("svg").attr({
      			width: @WI,
      			height: @HE
      			})
       */
      this.y_scale = this.x_scale = "";
      this.subData = {};
      this.x_axisLabel = this.x_axisLabel = "";
      this.data = data;
      this.color = d3.scale.category10();
      this._makeHandlers();
    }

    Session.prototype._set_scales = function() {
      this.x_scale = d3.scale.linear().domain([20, 100]).range([this.PAD * 2, this.WI]);
      return this.y_scale = d3.scale.linear().domain([100, 20]).range([this.PAD * 2, this.HE]);
    };

    Session.prototype._draw_axes = function() {
      var x_axis, y_axis;
      x_axis = d3.svg.axis().scale(this.x_scale).orient("bottom");
      y_axis = d3.svg.axis().scale(this.y_scale).orient("left");
      this.x_axisLabel = this.svg.append("text").attr({
        x: this.WI / 2,
        y: this.HE - this.PAD / 2
      }).text("Dummyx");
      this.y_axisLabel = this.svg.append("text").attr({
        x: this.PAD / 2,
        y: this.HE / 2,
        transform: "rotate(270 " + (this.PAD / 2) + "," + (this.HE / 2) + ")"
      }).text("Dummyy");
      this.svg.append("g").attr({
        "class": "x_axis",
        transform: "translate(-" + this.PAD + "," + (this.HE - this.PAD) + ")"
      }).call(x_axis);
      return this.svg.append("g").attr({
        "class": "y_axis",
        transform: "translate(" + this.PAD + ",-" + this.PAD + ")"
      }).call(y_axis);
    };

    Session.prototype._makeSubset = function(con) {
      var lmax, lmin, max, min, part, v, val, votAr, _ref;
      if (con == null) {
        con = "b";
      }
      votAr = [];
      min = Infinity;
      max = -Infinity;
      _ref = this.data;
      for (part in _ref) {
        v = _ref[part];
        val = v[con];
        votAr.push(val);
        lmax = d3.max(val);
        lmin = d3.min(val);
        max = lmax > max ? lmax : max;
        min = lmin < min ? lmin : min;
      }
      return {
        min: min,
        max: max,
        votAr: votAr
      };
    };

    Session.prototype._makeHandlers = function() {
      var cons, k, keys, kk, okeys, options, parts, v, vv, _, _i, _j, _len, _len1;
      keys = (function() {
        var _ref, _results;
        _ref = this.data["113_e"];
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(k);
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        k = keys[_i];
        this.subData[k] = this._makeSubset(k);
      }
      options = $("<div id='options'>");
      for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
        k = keys[_j];
        cons = $("<input type='radio' name='con' value='" + k + "'>" + k + "<br>");
        options.append(cons);
      }
      $("#map").append(options);
      $("input[type='radio']").click((function(_this) {
        return function(e) {
          var subData;
          console.log(e.target);
          subData = _this.subData[$(e.target).val()];
          return _this.draw(subData);
        };
      })(this));
      $("input[name='con']").first().click();
      this.update = true;
      okeys = (function() {
        var _ref, _results;
        _ref = this.data;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (kk in v) {
              vv = v[kk];
              _results1.push(vv.length);
            }
            return _results1;
          })());
        }
        return _results;
      }).call(this);
      console.log(okeys);
      console.log(okeys);
      okeys.push(keys);
      parts = (function() {
        var _ref, _results;
        _ref = this.data;
        _results = [];
        for (k in _ref) {
          _ = _ref[k];
          _results.push({
            sTitle: k
          });
        }
        return _results;
      }).call(this);
      return parts.push({
        sTitle: "Consonant"
      });
    };

    Session.prototype.draw = function(subData) {
      var chart;
      chart = d3.box().whiskers(iqr(1.5)).width(10).height(this.HE).domain([0.00, 0.125]).duration(1000);
      if (this.update) {
        this.chart.data(subData["votAr"]).call(chart);
        return this.txt.data(subData["votAr"]).text((function(_this) {
          return function(d, i) {
            return _this.partAr[i] + ": " + d.length;
          };
        })(this));
      } else {
        this.chart = d3.select("#map").selectAll("svg").data(subData["votAr"]).enter().append("svg").attr({
          "class": "box",
          title: (function(_this) {
            return function(d, i) {
              return d.length;
            };
          })(this),
          width: (this.WI + 200) / this.partAr.length,
          height: this.HE
        }).append("g").attr({
          transform: "translate(50,10)"
        }).call(chart);
        return this.txt = d3.select("#map").selectAll("svg").data(subData["votAr"]).append("text").attr({
          y: 10,
          x: 10
        }).text((function(_this) {
          return function(d, i) {
            return _this.partAr[i] + ": " + d.length;
          };
        })(this));
      }
    };

    return Session;

  })();

  session = new Session(votBoxplot);

}).call(this);

//# sourceMappingURL=vot.map
